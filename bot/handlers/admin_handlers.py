# bot/handlers/admin_handlers.py
from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import logging
from ..create_bot import bot

from bot.services.task_service import TaskService
from bot.services.user_service import UserService

logger = logging.getLogger(__name__)
admin_router = Router()

def get_admin_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"))
    builder.add(types.KeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏"))
    builder.add(types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    builder.add(types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"))
    builder.add(types.KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

class CreateTask(StatesGroup):
    title = State()
    description = State()
    image_url = State()
    correct_answer = State()
    points = State()

class EditTask(StatesGroup):
    task_id = State()
    field = State()
    value = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def check_admin(telegram_id: int, admin_ids: list) -> bool:
    return telegram_id in admin_ids

@admin_router.message(Command("admin"))
async def cmd_admin(message: types.Message, admin_ids: list):
    if not check_admin(message.from_user.id, admin_ids):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    admin_text = (
        "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:"
    )
    
    await message.answer(
        admin_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )

@admin_router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
@admin_router.message(Command("add_task"))
async def cmd_add_task(message: types.Message, state: FSMContext, admin_ids: list):
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    await state.set_state(CreateTask.title)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
    "–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ <code>/cancel</code>", parse_mode='html')

@admin_router.message(CreateTask.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(CreateTask.description)
    await message.answer("üìñ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")

@admin_router.message(CreateTask.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CreateTask.image_url)
    await message.answer("üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç):")

@admin_router.message(CreateTask.image_url)
async def process_image_url(message: types.Message, state: FSMContext):
    image_url = None if message.text.lower() == '–Ω–µ—Ç' else message.text
    await state.update_data(image_url=image_url)
    await state.set_state(CreateTask.correct_answer)
    await message.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")

@admin_router.message(CreateTask.correct_answer)
async def process_correct_answer(message: types.Message, state: FSMContext):
    await state.update_data(correct_answer=message.text)
    await state.set_state(CreateTask.points)
    await message.answer("üèÜ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10):")

@admin_router.message(CreateTask.points)
async def process_points(message: types.Message, state: FSMContext, task_service: TaskService):
    try:
        points = int(message.text) if message.text.isdigit() else 10
    except ValueError:
        points = 10
    
    data = await state.get_data()
    
    task = await task_service.create_task(
        title=data['title'],
        description=data['description'],
        image_url=data['image_url'],
        correct_answer=data['correct_answer'],
        points=points
    )
    
    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! ID: {task.id}")

@admin_router.message(F.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏")
@admin_router.message(Command("list_tasks"))
async def cmd_list_tasks(message: types.Message, task_service: TaskService, admin_ids: list):
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    tasks = await task_service.get_all_tasks()
    
    if not tasks:
        await message.answer("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return
    
    tasks_text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:</b>\n\n"
    for task in tasks:
        status = "‚úÖ" if task.is_active else "‚ùå"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
        tasks_text += (
            f"üÜî ID: {task.id}\n"
            f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {task.description[:50]}...\n"
            f"‚úÖ –û—Ç–≤–µ—Ç: <code>{task.correct_answer}</code>\n"  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            f"üèÜ –ë–∞–ª–ª—ã: {task.points}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: <code>/edit_task {task.id}</code>\n"
            f"‚ùå –£–¥–∞–ª–∏—Ç—å: <code>/delete_task {task.id}</code>\n"
            f"{'‚îÄ' * 30}\n"
        )
    
    await message.answer(tasks_text, parse_mode="HTML")

@admin_router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
@admin_router.message(Command("list_users"))
async def cmd_list_users(message: types.Message, user_service: UserService, admin_ids: list):
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    users = await user_service.get_all_users()
    
    if not users:
        await message.answer("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users:
        status = "‚úÖ –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å" if user.can_get_task else "‚ùå –†–µ—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ"
        current_task = await user_service.get_user_current_task(user.telegram_id)
        current_task_info = f" (–∑–∞–¥–∞–Ω–∏–µ: {current_task.title})" if current_task else ""
        
        users_text += (
            f"üë§ {user.full_name} (@{user.username or '–Ω–µ—Ç'})\n"
            f"üèÜ –ë–∞–ª–ª—ã: {user.score}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {status}{current_task_info}\n"
            f"üìã –í—ã–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ: <code>/allow_task {user.username}</code>\n"
            f"üîÑ –ü–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ: <code>/assign_task {user.username} task_id</code>\n"
            f"{'‚îÄ' * 30}\n"
        )
    
    await message.answer(users_text, parse_mode="HTML")

@admin_router.message(Command("allow_task"))
async def cmd_allow_task(message: types.Message, command: CommandObject, user_service: UserService, admin_ids: list):
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    if not command.args:
        await message.answer(
            "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /allow_task @username\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/allow_task @username</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        username = command.args.replace('@', '').strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user = await user_service.get_user_by_username(username)
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        await user_service.update_user_task_permission(user.telegram_id, True)
        await user_service.set_user_current_task(user.telegram_id, None)
        await bot.send_message(
            f"‚úÖ <b>–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /task –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /task –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in allow_task: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("edit_task"))
async def cmd_edit_task(message: types.Message, command: CommandObject, task_service: TaskService, admin_ids: list):
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    if not command.args:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_task task_id")
        return
    
    try:
        task_id = int(command.args)
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        task_info = (
            f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
            f"üÜî ID: {task.id}\n"
            f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
            f"üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞: {task.image_url or '–Ω–µ—Ç'}\n"
            f"‚úÖ –û—Ç–≤–µ—Ç: <code>{task.correct_answer}</code>\n"
            f"üèÜ –ë–∞–ª–ª—ã: {task.points}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if task.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="üìö –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{task.id}"),
            types.InlineKeyboardButton(text="üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{task.id}"),
        )
        builder.add(
            types.InlineKeyboardButton(text="üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞", callback_data=f"edit_image_{task.id}"),
            types.InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—Ç", callback_data=f"edit_answer_{task.id}"),
        )
        builder.add(
            types.InlineKeyboardButton(text="üèÜ –ë–∞–ª–ª—ã", callback_data=f"edit_points_{task.id}"),
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data=f"edit_status_{task.id}"),
        )
        
        await message.answer(task_info, reply_markup=builder.as_markup(), parse_mode="HTML")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞–Ω–∏—è")

@admin_router.callback_query(F.data.startswith("edit_"))
async def edit_task_callback(callback: types.CallbackQuery, state: FSMContext):
    data_parts = callback.data.split('_')
    field = data_parts[1]
    task_id = int(data_parts[2])
    
    field_names = {
        'title': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        'desc': '–æ–ø–∏—Å–∞–Ω–∏–µ', 
        'image': 'URL –∫–∞—Ä—Ç–∏–Ω–∫–∏',
        'answer': '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
        'points': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤',
        'status': '—Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    }
    
    await state.update_data(edit_task_id=task_id, edit_field=field)
    
    if field == 'status':
        # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω–æ", callback_data=f"set_active_{task_id}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ", callback_data=f"set_inactive_{task_id}"),
        )
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ID {task_id}:",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_names[field]}:")
    
    await callback.answer()

@admin_router.callback_query(F.data.startswith("set_"))
async def set_status_callback(callback: types.CallbackQuery, task_service: TaskService):
    data_parts = callback.data.split('_')
    status = data_parts[1]
    task_id = int(data_parts[2])
    
    is_active = status == 'active'
    
    task = await task_service.update_task(task_id, is_active=is_active)
    
    if task:
        status_text = "–∞–∫—Ç–∏–≤–Ω–æ" if task.is_active else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ"
        await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è ID {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
    
    await callback.answer()


@admin_router.message(Command("assign_task"))
async def cmd_assign_task(message: types.Message, command: CommandObject, task_service: TaskService, user_service: UserService, admin_ids: list):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    if not command.args:
        await message.answer(
            "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /assign_task @username task_id\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/assign_task @username 5</code>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n"
            "<code>/list_tasks</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        args = command.args.split()
        if len(args) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        
        username = args[0].replace('@', '').strip()
        task_id = int(args[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user = await user_service.get_user_by_username(username)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID
        task = await task_service.get_task_by_id(task_id)
        if not task:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        if not task.is_active:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID {task_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        if await task_service.db.has_user_solved_task(user.id, task_id):
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —Ä–µ—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ '{task.title}'.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /allow_task @{username} —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
            )
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await user_service.set_user_current_task(user.telegram_id, task_id)
        await user_service.update_user_task_permission(user.telegram_id, True)
    

        await message.answer(
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üìö –ó–∞–¥–∞–Ω–∏–µ: {task.title} (ID: {task.id})\n"
            f"üèÜ –ë–∞–ª–ª—ã: {task.points}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ /task",
            parse_mode="HTML"
        )
    
        await bot.send_message(
            user.telegram_id,
            f"üéØ <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\n"
            f"üìö {task.title}\n"
            f"üèÜ –ë–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ: {task.points}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
            parse_mode="HTML"
        )
    except ValueError as e:
        if "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤" in str(e):
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /assign_task @username task_id\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "<code>/assign_task @username 5</code>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"Error in assign_task: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("user_tasks"))
async def cmd_user_tasks(message: types.Message, command: CommandObject, user_service: UserService, task_service: TaskService, admin_ids: list):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not check_admin(message.from_user.id, admin_ids):
        return
        
    users = await user_service.get_all_users()
    
    users_with_tasks = []
    for user in users:
        current_task = await user_service.get_user_current_task(user.telegram_id)
        if current_task:
            users_with_tasks.append((user, current_task))
    
    if not users_with_tasks:
        await message.answer("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.")
        return
    
    tasks_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏:</b>\n\n"
    for user, task in users_with_tasks:
        tasks_text += (
            f"üë§ @{user.username or '–±–µ–∑ username'} ({user.full_name})\n"
            f"üìö –ó–∞–¥–∞–Ω–∏–µ: {task.title} (ID: {task.id})\n"
            f"‚úÖ –û—Ç–≤–µ—Ç: <code>{task.correct_answer}</code>\n"
            f"üèÜ –ë–∞–ª–ª—ã: {task.points}\n"
            f"{'‚îÄ' * 30}\n"
        )
    
    await message.answer(tasks_text, parse_mode="HTML")

@admin_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def delete_task_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    await message.answer(
        "‚ùå <b>–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/delete_task task_id</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>/delete_task 5</code>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n"
        "<code>/list_tasks</code>\n\n"
        "<i>–í–Ω–∏–º–∞–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</i>",
        parse_mode="HTML"
    )

@admin_router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è")
async def cancel_action_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚úÖ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è <b>–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel",
            parse_mode="HTML"
        )

@admin_router.message(CreateTask.title, F.text.in_(["–æ—Ç–º–µ–Ω–∞", "cancel", "—Å—Ç–æ–ø", "stop", "/cancel"]))
@admin_router.message(CreateTask.description, F.text.in_(["–æ—Ç–º–µ–Ω–∞", "cancel", "—Å—Ç–æ–ø", "stop", "/cancel"]))
@admin_router.message(CreateTask.image_url, F.text.in_(["–æ—Ç–º–µ–Ω–∞", "cancel", "—Å—Ç–æ–ø", "stop", "/cancel"]))
@admin_router.message(CreateTask.correct_answer, F.text.in_(["–æ—Ç–º–µ–Ω–∞", "cancel", "—Å—Ç–æ–ø", "stop", "/cancel"]))
@admin_router.message(CreateTask.points, F.text.in_(["–æ—Ç–º–µ–Ω–∞", "cancel", "—Å—Ç–æ–ø", "stop", "/cancel"]))

@admin_router.message()
async def handle_edit_value(message: types.Message, state: FSMContext, task_service: TaskService):
    data = await state.get_data()
    
    if 'edit_task_id' not in data or 'edit_field' not in data:
        return
    
    task_id = data['edit_task_id']
    field = data['edit_field']
    value = message.text
    
    update_data = {}
    
    if field == 'title':
        update_data['title'] = value
    elif field == 'desc':
        update_data['description'] = value
    elif field == 'image':
        update_data['image_url'] = value if value.lower() != '–Ω–µ—Ç' else None
    elif field == 'answer':
        update_data['correct_answer'] = value
    elif field == 'points':
        try:
            update_data['points'] = int(value)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–ª–æ–≤")
            return
    
    task = await task_service.update_task(task_id, **update_data)
    
    if task:
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ID {task_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
    
    await state.clear()

