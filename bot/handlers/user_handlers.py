# bot/handlers/user_handlers.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging

from bot.services.task_service import TaskService
from bot.services.user_service import UserService
from bot.models.models import Task  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)
user_router = Router()

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_task_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.add(types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@user_router.message(Command("start"))
async def cmd_start(message: types.Message, user_service: UserService):
    user = await user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    
    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π!\n\n"
        "üéØ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /task –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π\n"
        "üìù –ó–∞ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–∞–ª–ª—ã - –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∫ –∑–∞–¥–∞–Ω–∏—é '–û—Ç–≤–µ—Ç ...—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞...'\n"
        "üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n\n"
        "–£–¥–∞—á–∏! üçÄ"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

@user_router.message(Command("task"))
@user_router.message(F.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def cmd_task(message: types.Message, task_service: TaskService, user_service: UserService):
    user = await user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    if not user.can_get_task:
        await message.answer(
            "‚è≥ –í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    current_task = await user_service.get_user_current_task(message.from_user.id)
    if current_task:
        await show_current_task(message, current_task)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    task = await task_service.get_random_task_for_user(message.from_user.id)
    
    if not task:
        await message.answer(
            "üéâ –í—ã —Ä–µ—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await user_service.set_user_current_task(message.from_user.id, task.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await show_current_task(message, task)

async def show_current_task(message: types.Message, task: Task):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: Task –≤–º–µ—Å—Ç–æ types.Task
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    task_text = (
        f"üìö <b>{task.title}</b>\n\n"
        f"üìñ {task.description}\n\n"
        f"üèÜ –ë–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ: {task.points}"
    )
    
    if task.image_url:
        await message.answer_photo(
            photo=task.image_url,
            caption=task_text,
            parse_mode="HTML"
        )
    else:
        await message.answer(task_text, parse_mode="HTML")
    
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:",
        reply_markup=get_task_keyboard()
    )

@user_router.message(Command("stats"))
@user_router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: types.Message, user_service: UserService):
    stats = await user_service.get_user_stats(message.from_user.id)
    if stats:
        status = "‚úÖ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" if stats['can_get_task'] else "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        current_task_info = f"üìù –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {stats['current_task']}" if stats['current_task'] else "üìù –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–µ—Ç"
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{stats['username'] or '–±–µ–∑ username'}\n"
            f"üèÜ –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {stats['score']}\n"
            f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {stats['solved_count']}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {status}\n"
            f"{current_task_info}"
        )
        
        await message.answer(stats_text, parse_mode="HTML")
    else:
        await message.answer("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

@user_router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_main_menu(message: types.Message):
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@user_router.message(Command("debug"))
async def cmd_debug(message: types.Message, task_service: TaskService, user_service: UserService):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    debug_info = await task_service.db.debug_user_state(message.from_user.id)
    
    debug_text = (
        f"üîß <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"üë§ User ID: {debug_info['user_id']}\n"
        f"üì± Telegram ID: {debug_info['telegram_id']}\n"
        f"üéØ –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è: {debug_info['can_get_task']}\n"
        f"üèÜ –ë–∞–ª–ª—ã: {debug_info['score']}\n"
        f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {debug_info['attempts_count']}\n"
        f"‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {debug_info['solved_tasks']}\n"
    )
    
    if debug_info['last_attempt']:
        last = debug_info['last_attempt']
        debug_text += (
            f"\nüìã <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞:</b>\n"
            f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {last['task_id']}\n"
            f"üìù –û—Ç–≤–µ—Ç: {last['user_answer']}\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {last['is_correct']}\n"
            f"üïê –í—Ä–µ–º—è: {last['attempted_at']}"
        )
    
    await message.answer(debug_text, parse_mode="HTML")

@user_router.message(F.text.contains('–û—Ç–≤–µ—Ç'))
async def handle_answer(message: types.Message, task_service: TaskService, user_service: UserService):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    if (message.text.startswith('/') or 
        message.text in ["üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]):
        return
    
    user = await user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞—Ç—å
    if not user.can_get_task:
        await message.answer(
            "‚è≥ –í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_task = await user_service.get_user_current_task(message.from_user.id)
    if not current_task:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /task",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    user_answer = message.text.lower().replace('–æ—Ç–≤–µ—Ç', '').strip()
    is_correct = await task_service.check_answer(current_task.id, user_answer)
    
    logger.info(f"Answer check - Task: {current_task.id}, User answer: '{user_answer}', Correct: '{current_task.correct_answer}', Is correct: {is_correct}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
    await task_service.db.create_attempt(user.id, current_task.id, user_answer, is_correct)
    
    if is_correct:
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        await user_service.update_user_score(message.from_user.id, current_task.points)
        # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
        await user_service.update_user_task_permission(message.from_user.id, False)
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        await user_service.set_user_current_task(message.from_user.id, None)
        
        stats = await user_service.get_user_stats(message.from_user.id)
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üéØ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {current_task.points} –±–∞–ª–ª–æ–≤\n"
            f"üèÜ –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {stats['score']}\n\n"
            f"–í—ã —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
            parse_mode="HTML"
        )